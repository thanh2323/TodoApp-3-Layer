@model TodoApp.Web.ViewModels.TodoDetailsViewModel

@{
    ViewData["Title"] = "Todo Details";
}

<div class="row">
    <div class="col-md-8 offset-md-2">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h4 class="mb-0">
                    <i class="fas fa-eye me-2"></i>Todo Details
                </h4>
                <div>
                    <span class="badge @Model.StatusBadgeClass">@Model.Todo.StatusText</span>
                    <span class="badge @Model.PriorityBadgeClass ms-1">@Model.Todo.PriorityText</span>
                    @if (Model.Todo.IsOverdue)
                    {
                        <span class="badge bg-danger ms-1">
                            <i class="fas fa-exclamation-triangle me-1"></i>Overdue
                        </span>
                    }
                </div>
            </div>
            <div class="card-body">
                <div class="mb-4">
                    <h5 class="@(Model.Todo.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                        @Model.Todo.Title
                    </h5>

                    @if (!string.IsNullOrWhiteSpace(Model.Todo.Description))
                    {
                        <div class="mt-3">
                            <h6>Description:</h6>
                            <p class="@(Model.Todo.IsCompleted ? "text-muted" : "")">
                                @Model.Todo.Description
                            </p>
                        </div>
                    }
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h6 class="card-title">
                                    <i class="fas fa-flag me-1"></i>Priority & Status
                                </h6>
                                <div class="mb-2">
                                    <strong>Priority:</strong>
                                    <span class="badge @Model.PriorityBadgeClass ms-1">@Model.Todo.PriorityText</span>
                                </div>
                                <div class="mb-2">
                                    <strong>Status:</strong>
                                    <span class="badge @Model.StatusBadgeClass ms-1">@Model.Todo.StatusText</span>
                                </div>
                                @if (Model.Todo.IsOverdue)
                                {
                                    <div class="alert alert-danger py-2">
                                        <i class="fas fa-exclamation-triangle me-1"></i>
                                        This todo is overdue!
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h6 class="card-title">
                                    <i class="fas fa-calendar me-1"></i>Dates
                                </h6>
                                <div class="mb-2">
                                    <strong>Due Date:</strong>
                                    @if (Model.Todo.DueDate.HasValue)
                                    {
                                        <span class="@(Model.Todo.IsOverdue ? "text-danger fw-bold" : "")">
                                            @Model.Todo.DueDate.Value.ToString("dd/MM/yyyy")
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No due date set</span>
                                    }
                                </div>
                                <div class="mb-2">
                                    <strong>Created:</strong> @Model.FormattedCreatedAt
                                </div>
                                <div>
                                    <strong>Last Updated:</strong> @Model.FormattedUpdatedAt
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-grid gap-2 d-md-flex justify-content-md-between mt-4">
                    <div>
                        <button class="btn @(Model.Todo.IsCompleted ? "btn-warning" : "btn-success")"
                                onclick="toggleStatus(@Model.Todo.Id)">
                            <i class="fas @(Model.Todo.IsCompleted ? "fa-undo" : "fa-check") me-1"></i>
                            @(Model.Todo.IsCompleted ? "Mark as Pending" : "Mark as Complete")
                        </button>
                    </div>
                    <div>
                        <a asp-action="Index" class="btn btn-outline-secondary">
                            <i class="fas fa-arrow-left me-1"></i>Back to List
                        </a>
                        <a asp-action="Edit" asp-route-id="@Model.Todo.Id" class="btn btn-primary ms-1">
                            <i class="fas fa-edit me-1"></i>Edit
                        </a>
                        <a asp-action="Delete" asp-route-id="@Model.Todo.Id" class="btn btn-outline-danger ms-1">
                            <i class="fas fa-trash me-1"></i>Delete
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleStatus(todoId) {
            showLoading();

            $.ajax({
                url: '@Url.Action("ToggleStatus", "Todo")',
                type: 'POST',
                data: { id: todoId },
                success: function (result) {
                    hideLoading();
                    if (result.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + result.message);
                    }
                },
                error: function () {
                    hideLoading();
                    alert('An error occurred while updating the todo status.');
                }
            });
        }
    </script>
}